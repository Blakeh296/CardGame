<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>